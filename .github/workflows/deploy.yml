name: Deploy to AWS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform

      - name: Get Terraform Output
        id: terraform-output
        run: |
          # Get raw output and extract just the IP address
          EC2_IP=$(terraform output -raw public_ip 2>&1 | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
          
          if [ -z "$EC2_IP" ]; then
            echo "ERROR: Could not extract valid IP address from Terraform output"
            exit 1
          fi
          
          echo "Extracted IP: $EC2_IP"
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
          echo "$EC2_IP" > $GITHUB_WORKSPACE/ec2_ip.txt
        working-directory: terraform
  
      - name: Debug Files
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in workspace:"
          ls -la
          echo "IP file contents:"
          cat $GITHUB_WORKSPACE/ec2_ip.txt || echo "No ec2_ip.txt found"
        
      - name: Wait for EC2 Instance to be Ready
        run: sleep 45  # Increased wait time for instance initialization

      - name: Setup SSH Private Key
        run: |
          mkdir -p ~/.ssh
          # Properly format the private key with newlines
          cat <<EOF > ~/.ssh/id_rsa
          ${{ secrets.SSH_PRIVATE_KEY }}
          EOF
          chmod 600 ~/.ssh/id_rsa
          
          # Verify key format
          if ! ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub; then
            echo "ERROR: Invalid SSH private key format"
            exit 1
          fi
          
          IP=$(cat $GITHUB_WORKSPACE/ec2_ip.txt)
          echo "Adding SSH key for IP: $IP"
          ssh-keyscan -H "$IP" >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          IP=$(cat $GITHUB_WORKSPACE/ec2_ip.txt)
          echo "Testing SSH connection to $IP"
          ssh -i ~/.ssh/id_rsa \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o ConnectTimeout=30 \
              -o BatchMode=yes \
              ec2-user@$IP echo "SSH connection successful" || exit 1

      - name: SSH into EC2 and Deploy Docker with Nginx
        run: |
          IP=$(cat $GITHUB_WORKSPACE/ec2_ip.txt)
          echo "Using IP Address: $IP"
          
          ssh -i ~/.ssh/id_rsa \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o ConnectTimeout=30 \
              ec2-user@$IP << 'EOF'
          # Update system and install Docker
          sudo dnf update -y
          sudo dnf install -y docker git
          
          # Configure firewall
          sudo dnf install -y firewalld
          sudo systemctl enable --now firewalld
          sudo firewall-cmd --permanent --add-port=80/tcp
          sudo firewall-cmd --reload
          
          # Start and enable Docker
          sudo systemctl enable --now docker
          sudo usermod -aG docker ec2-user
          
          # Install Python and required packages
          sudo dnf install -y python3 python3-pip
          sudo pip3 install --upgrade pip
          sudo pip3 install docker ansible-core
          
          # Create Ansible playbook
          cat <<EOT > playbook.yml
          ---
          - name: Deploy Nginx Container
            hosts: localhost
            become: true
            tasks:
              - name: Ensure Docker SDK is installed
                pip:
                  name:
                    - docker
                    - requests>=2.26.0
              
              - name: Pull Nginx image
                community.docker.docker_image:
                  name: nginx
                  source: pull

              - name: Run Nginx container
                community.docker.docker_container:
                  name: nginx_server
                  image: nginx
                  state: started
                  restart_policy: always
                  ports:
                    - "80:80"
                  published_ports:
                    - "80:80"
          EOT
          
          # Execute playbook
          /usr/local/bin/ansible-playbook playbook.yml -v
          
          # Wait for container to start
          sleep 10
          
          # Verification and debugging
          echo "=== Docker Containers ==="
          sudo docker ps -a
          
          echo "=== Nginx Container Logs ==="
          sudo docker logs nginx_server
          
          echo "=== Port Binding Check ==="
          sudo netstat -tulnp | grep 80 || true
          
          echo "=== Curl Test ==="
          curl -v http://localhost:80 || curl -v http://127.0.0.1:80
          EOF
